{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. Introduction1. Introduction Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-24 17:59:51 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Computer_Basics/":{"url":"Computer_Basics/","title":"计算机基础","keywords":"","body":"1. 1.计算机基础1. 1.计算机基础 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-01-31 14:41:36 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Computer_Basics/计算机组成原理.html":{"url":"Computer_Basics/计算机组成原理.html","title":"计算机组成原理","keywords":"","body":"1.1. 什么是计算机？1.2. 计算机是由什么组成的？1.2.1. 一、硬件系统：1.2.2. 二、软件系统：1.3. 三、计算机是如何处理程序的？1.4. 四、编程语言是什么？1.5. 五、什么是Python？1.1. 什么是计算机？ 计算机（computer）俗称电脑，是现代一种用于高速计算的电子机器，可以进行数值计算，又可以进行逻辑判断，还具有存储记忆功能，且能够按照程序的运行，自动、高速处理数据。 计算机是20世纪最先进的科学技术发明之一。 1.2. 计算机是由什么组成的？ 一个完整的计算机系统，是由硬件系统和软件系统两大部分组成的。 1.2.1. 一、硬件系统： 主要分为主机和外设两部分，是指那些构成计算机系统的物理实体，它们主要由各种各样的电子器件和机电装置组成。 从ENIAC(世界上第一台计算机)到当前最先进的计算机，硬件系统的设计采用的都是 冯·诺依曼体系结构。 运算器:　负责数据的算术运算和逻辑运算，即数据的加工处理。 控制器:　是整个计算机的中枢神经，分析程序规定的控制信息，并根据程序要求进行控制，协调计算机各部分组件工作及内存与外设的访问等。 运算器和控制器统称中央处理器（即CPU) 存储器:　实现记忆功能的部件，用来存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。 输入设备:　实现将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。 输出设备:　实现将计算机处理后生成的中间结果或最后结果（各种数据符号及文字或各种控制信号等信息）输出出来。 1.2.2. 二、软件系统： 主要分为系统软件和应用软件，是指计算机证运行所需的各种各样的计算机程序。 系统软件的任务是既要保证计算机硬件的正常工作，又要使计算机硬件的性能得到充分发挥，并且为计算机用户提供一个比较直观、方便和友好的使用界面。 操作系统：是一种方便用户管理和控制计算机软硬件资源的系统软件，同时也是一个大型的软件系统，其功能复杂，体系庞大，在整个计算机系统中具有承上启下的地位。我们操作计算机实际上是通过操作系统来进行的，它是所有软件的基础和核心。 语言处理程序：也称为编译程序，作用是把程序员用某种编程语言(如Python)所编写的程序，翻译成计算机可执行的机器语言。机器语言也被称为机器码，是可以通过CPU进行分析和执行的指令集。 1.3. 三、计算机是如何处理程序的？ 按照冯·诺依曼存储程序的原理，计算机的工作流程大致如下： 用户打开程序，程序开始执行； 操作系统将程序内容和相关数据送入计算机的内存； CPU根据程序内容从内存中读取指令； CPU分析、处理指令，并为取下一条指令做准备； 取下一条指令并分析、处理，如此重复操作，直至执行完程序中全部指令，最后将计算的结果放入指令指定的存储器地址中。 1.4. 四、编程语言是什么？ 是用来定义 计算机程序 的形式语言。我们通过编程语言来编写程序代码，再通过语言处理程序执行向计算机发送指令，让计算机完成对应的工作。 简单来说，编程语言就是人类和计算机进行交流的语言。 1.5. 五、什么是Python？ Python就是一门编程语言，而且是现在世界上最流行的编程语言之一。 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 15:08:10 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/":{"url":"python_basics/","title":"Python基础","keywords":"","body":"1. 2.Python基础1. 2.Python基础 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-01-31 14:41:37 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/认识Python.html":{"url":"python_basics/认识Python.html","title":"认识Python","keywords":"","body":"1. 认识python(了解)1.1. 一、Python发展背景1.2. 二、Python语言的诞生1.3. 三、关键点常识1.4. 四、Python优缺点1.4.1. 优点1.4.2. 缺点1.5. 五、Python应用场景1. 认识python(了解) 1.1. 一、Python发展背景 Python的作者，Guido von Rossum（吉多·范·罗苏姆，中国Python程序员都叫他 龟叔），荷兰人。1982年，龟叔从阿姆斯特丹大学获得了数学和计算机硕士学位。然而，尽管他算得上是一位数学家，但他更加享受计算机带来的乐趣。用他的话说，虽然拥有数学和计算机双料资质，他总趋向于做计算机相关的工作，并热衷于做任何和编程相关的事情。 在那个时候，龟叔接触并使用过诸如Pascal、C、Fortran等语言。这些语言的基本设计原则是让机器能更快运行。在80年代，虽然IBM和苹果已经掀起了个人电脑浪潮，但这些个人电脑的配置很低。比如早期的Macintosh，只有8MHz的CPU主频和128KB的RAM，一个大的数组就能占满内存。所有的编译器的核心是做优化，以便让程序能够运行。为了增进效率，语言也迫使程序员像计算机一样思考，以便能写出更符合机器口味的程序。在那个时代，程序员恨不得用手榨取计算机每一寸的能力。有人甚至认为C语言的指针是在浪费内存。至于动态类型，内存自动管理，面向对象…… 别想了，那会让你的电脑陷入瘫痪。 这种编程方式让龟叔感到苦恼。龟叔知道如何用C语言写出一个功能，但整个编写过程需要耗费大量的时间，即使他已经准确的知道了如何实现。他的另一个选择是shell。Bourne Shell作为UNIX系统的解释器已经长期存在。UNIX的管理员们常常用shell去写一些简单的脚本，以进行一些系统维护的工作，比如定期备份、文件系统管理等等。shell可以像胶水一样，将UNIX下的许多功能连接在一起。许多C语言下上百行的程序，在shell下只用几行就可以完成。然而，shell的本质是调用命令。它并不是一个真正的语言。比如说，shell没有数值型的数据类型，加法运算都很复杂。总之，shell不能全面的调动计算机的功能。 龟叔希望有一种语言，这种语言能够像C语言那样，能够全面调用计算机的功能接口，又可以像shell那样，可以轻松的编程。ABC语言让龟叔看到希望。ABC是由荷兰的数学和计算机研究所开发的。龟叔在该研究所工作，并参与到ABC语言的开发。ABC语言以教学为目的。与当时的大部分语言不同，ABC语言的目标是“让用户感觉更好”。ABC语言希望让语言变得容易阅读，容易使用，容易记忆，容易学习，并以此来激发人们学习编程的兴趣。比如下面是一段来自Wikipedia的ABC程序，这个程序用于统计文本中出现的词的总数： HOW TO RETURN words document: PUT {} IN collection FOR line IN document: FOR word IN split line: IF word not.in collection: INSERT word IN collection RETURN collection HOW TO用于定义一个函数。一个Python程序员应该很容易理解这段程序。ABC语言使用冒号和缩进来表示程序块。行 尾没有分号。for和if结构中也没有括号() 。赋值采用的是PUT，而不是更常见的等号。这些改动让ABC程序读起来像一段文字。 尽管已经具备了良好的可读性和易用性，ABC语言最终没有流行起来。在当时，ABC语言编译器需要比较高配置的电脑才能运行。而这些电脑的使用者通常精通计算机，他们更多考虑程序的效率，而非它的学习难度。除了硬件上的困难外，ABC语言的设计也存在一些致命的问题： 可拓展性差。ABC语言不是模块化语言。如果想在ABC语言中增加功能，比如对图形化的支持，就必须改动很多地方。 不能直接进行IO。ABC语言不能直接操作文件系统。尽管你可以通过诸如文本流的方式导入数据，但ABC无法直接读写文 件。输入输出的困难对于计算机语言来说是致命的。你能想像一个打不开车门的跑车么？ 过度革新。ABC用自然语言的方式来表达程序的意义，比如上面程序中的HOW TO 。然而对于程序员来说，他们更习惯 用function或者define来定义一个函数。同样，程序员更习惯用等号来分配变量。尽管ABC语言很特别，但学习难度 也很大。 传播困难。ABC编译器很大，必须被保存在磁带上。当时龟叔在访问的时候，就必须有一个大磁带来给别人安装ABC编 译器。 这样，ABC语言就很难快速传播。 1989年，为了打发圣诞节假期，龟叔开始写Python语言的编译器。Python这个名字，来自龟叔所挚爱的电视剧Monty Python's Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。龟叔作为一个语言设计爱好者，已经有过设计语言的尝试。这一次，也不过是一次纯粹的hacking行为。 1.2. 二、Python语言的诞生 1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了 ：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。 Python语法很多来自C，但又受到ABC语言的强烈影响。来自ABC语言的一些规定直到今天还富有争议，比如强制缩进。 但这些语法规定让Python容易读。另一方面，Python聪明的选择服从一些惯例，特别是C语言的惯例，比如回归等号赋值。龟叔认为，如果“常识”上确立的东西，没有必要过度纠结。 Python从一开始就特别在意可拓展性。Python可以在多个层次上拓展。从高层上，你可以直接引入. py文件。在底层，你可以引用C语言的库。Python程序员可以快速的使用Python写. py文件作为拓展模块。但当性能是考虑的重要因素时，Python程序员可以深入底层，写C程序，编译为.so文件引入到Python中使用。Python就好像是使用钢构建房一样，先规定好大的框架。而程序员可以在此框架下相当自由的拓展或更 改。 最初的Python完全由龟叔本人开发。Python得到龟叔同事的欢迎。他们迅速的反馈使用意见，并参与到Python的改进。龟叔和一些同事构成Python的核心团队。他们将自己大部分的业余时间用于hack Python。随后，Python拓 展到研究所之外。Python将许多机器层面上的细节隐藏，交给编译器处理，并凸显出逻辑层面的编程思考。Python程 序员可以花更多的时间用于思考程序的逻辑，而不是具体的实现细节。这一特征吸引了广大的程序员。Python开始流行。 人生苦短，我用python 计算机硬件越来越强大，Python又容易使用，所以许多人开始转向Python。龟叔维护了一个mail list，Python用户就通过邮件进行交流。Python用户来自许多领域，有不同的背景，对Python也有不同的需求。Python相当的开放，又容 易拓展，所以当用户不满足于现有功能，很容易对Python进行拓展或改造。随后，这些用户将改动发给龟叔，并由龟叔决定是否将新的特征加入到Python或者标准库中。如果代码能被纳入Python自身或者标准库，这将极大的荣誉。由于龟叔至高无上的决定权，他因此被称为“终身的仁慈独裁者”。 Python以及其标准库的功能强大。这些是整个社区的贡献。Python的开发者来自不同领域，他们将不同领域的优点带给Python。比如Python标准库中的正则表达是参考Perl，而lambda, map, filter, reduce等函数参考了Lisp。Python本身的一些功能以及大部分的标准库来自于社区。Python的社 区不断扩大，进而拥有了自己的newsgroup，网站，以及基金。从Python 2.0开始，Python也从mail list的开发方式，转为完全开源的开发方式。社区气氛已经形成，工作被整个社区分担，Python也获得了更加高速的发展。 到今天，Python的框架已经确立。Python语言以对象为核心组织代码，支持多种编程范式，采用动态类型，自动进行内存回收。Python支持解释运行，并能调用C库进行拓展。Python有强大的标准库。由于标准库的体系已经稳定，所以Python的生态系统开始拓展到第三方包。这些包，如Django、web.py、wxpython、numpy、matplotlib、PIL，将Python升级成了物种丰富的热带雨林。 Python崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。Python在TIOBE排行榜中排行第八，它是Google的第三大开发语言，Dropbox的基础语言，豆瓣的服务器语言。Python的发展史可以作为一个代表，带给我许多启示。 在Python的开发过程中，社区起到了重要的作用。龟叔自认为自己不是全能型的程序员，所以他只负责制订框架。如果问题太复杂，他会选择绕过去，也就是cut the corner。这些问题最终由社区中的其他人解决。社区中的人才是异常丰富的，就连创建网站，筹集基金这样与开发稍远的事情，也有人乐意于处理。如今的项目开发越来越复杂，越来越庞大，合作以及开放的心态成为项目最终成功的关键。 Python从其他语言中学到了很多，无论是已经进入历史的ABC，还是依然在使用的C和Perl，以及许多没有列出的其他 语言。可以说，Python的成功代表了它所有借鉴的语言的成功。同样，Ruby借鉴了Python，它的成功也代表了Python某些方面的成功。每个语言都是混合体，都有它优秀的地方，但也有各种各样的缺陷。同时，一个语言“好与不好”的评判，往往受制于平台、硬件、时代等等外部原因。程序员经历过许多语言之争。其实，以开放的心态来接受各个语言，说不定哪一天，程序员也可以如龟叔那样，混合出自己的语言。 1.3. 三、关键点常识 Python的发音与拼写 Python的作者是Guido van Rossum（龟叔） Python正式诞生于1991年 Python的解释器如今有多个语言实现，我们常用的是CPython（官方版本的C语言实现），其他还有Jython（可以运行在Java平台）、IronPython（可以运行在.NET和Mono平台）、PyPy（Python实现的，支持JIT即时编译） Python目前有两个版本，Python2和Python3，最新版分别为2.7和3.8 Life is shot, you need Python. 人生苦短，我用Python。 （TIOBE 编程语言流行排行榜） 1.4. 四、Python优缺点 1.4.1. 优点 简单：Python是一种代表简单主义思想的语言。阅读一个良好的Python程序就感觉像是在读英语一样，尽管这个英语的要求非常严格！Python的这种伪代码本质是它最大的优点之一。它使你能够专注于解决问题而不是去搞明白语言本身。 易学：就如同你即将看到的一样，Python极其容易上手。前面已经提到了，Python有极其简单的语法。 免费、开源：Python是FLOSS（自由/开放源码软件）之一。简单地说，你可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。FLOSS是基于一个团体分享知识的概念。这是为什么Python如此优秀的原因之一——它是由一群希望看到一个更加优秀的Python的人创造并经常改进着的。 高层语言：当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节。 可移植性：由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就可以在下述任何平台上面运行。这些平台包括Linux、Windows、FreeBSD、Macintosh、Solaris、OS/2、Amiga、AROS、AS/400、BeOS、OS/390、z/OS、Palm OS、QNX、VMS、Psion、Acom RISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE甚至还有PocketPC、Symbian以及Google基于linux开发的Android平台！ 解释型语言：一个用编译型语言比如C或C++写的程序可以从源文件（即C或C++语言）转换到一个你的计算机使用的语言（二进制代码，即0和1）。这个过程通过编译器和不同的标记、选项完成。当你运行你的程序的时候，连接/转载器软件把你的程序从硬盘复制到内存中并且运行。而Python语言写的程序不需要编译成二进制代码。你可以直接从源代码运行程序。在计算机内部，Python解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。事实上，由于你不再需要担心如何编译程序，如何确保连接转载正确的库等等，所有这一切使得使用Python更加简单。由于你只需要把你的Python程序拷贝到另外一台计算机上，它就可以工作了，这也使得你的Python程序更加易于移植。 面向对象：Python既支持面向过程的编程也支持面向对象的编程。在“面向过程”的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。与其他主要的语言如C++和Java相比，Python以一种非常强大又简单的方式实现面向对象编程。 可扩展性：如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。 丰富的库：Python标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。记住，只要安装了Python，所有这些功能都是可用的。这被称作Python的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。 规范的代码：Python采用强制缩进的方式使得代码具有极佳的可读性。 1.4.2. 缺点 Python语言非常完善，没有明显的短板和缺点，唯一的缺点就是执行效率慢，这个是解释型语言所通有的，同时这个缺点也将被计算机越来越强大的性能所弥补。 1.5. 五、Python应用场景 Web应用开发 Python经常被用于Web开发。比如，通过mod_wsgi模块，Apache可以运行用Python编写的Web程序。Python定义了WSGI标准应用接口来协调Http服务器与基于Python的Web程序之间的通信。一些Web框架，如Django,TurboGears,web2py,Zope等，可以让程序员轻松地开发和管理复杂的Web程序。 操作系统管理、服务器运维的自动化脚本 在很多操作系统里，Python是标准的系统组件。 大多数Linux发行版以及NetBSD、OpenBSD和Mac OS X都集成了Python，可以在终端下直接运行Python。有一些Linux发行版的安装器使用Python语言编写，比如Ubuntu的Ubiquity安装器,Red Hat Linux和Fedora的Anaconda安装器。Gentoo Linux使用Python来编写它的Portage包管理系统。Python标准库包含了多个调用操作系统功能的库。通过pywin32这个第三方软件 包，Python能够访问Windows的COM服务及其它Windows API。使用IronPython，Python程序能够直接调用.Net Framework。一般说来，Python编写的系统管理脚本在可读性、性能、代码重用度、扩展性几方面都优于普通的shell脚本。 网络爬虫 Python有大量的HTTP请求处理库和HTML解析库，并且有成熟高效的爬虫框架Scrapy和分布式解决方案scrapy-redis，在爬虫的应用方面非常广泛。 科学计算 NumPy、SciPy、Pandas、Matplotlib可以让Python程序员编写科学计算程序。 桌面软件 PyQt、PySide、wxPython、PyGTK是Python快速开发桌面应用程序的利器。 服务器软件（网络软件） Python对于各种网络协议的支持很完善，因此经常被用于编写服务器软件、网络爬虫。第三方库Twisted支持异步网络编程和多数标准的网络协议(包含客户端和服务器)，并且提供了多种工具，被广泛用于编写高性能的服务器软件。 游戏 很多游戏使用C++编写图形显示等高性能模块，而使用Python或者Lua编写游戏的逻辑、服务器。相较于Python，Lua的功能更简单、体积更小；而Python则支持更多的特性和数据类型。 构思实现，产品早期原型和迭代 Google、NASA、Facebook都在内部大量地使用Python。 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 15:22:06 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/第一个Python程序.html":{"url":"python_basics/第一个Python程序.html","title":"第一个Python程序","keywords":"","body":"1.1. 使用Pycharm编写第一个python程序1.2. 练一练1.1. 使用Pycharm编写第一个python程序 在继续阅读之前，请确保你已经成功的安装并配置好了Python的相关开发环境。 打开 Pycharm，选择 Create New Project，创建一个新项目 选择Pure Python表示创建一个纯Python程序项目, Location 表示该项目保存的路径，Interpreter 表示使用的Python解释器版本，最后点击Create 创建项目。 右击项目，选择New，再选择Python File 在弹出的对话框中输入的文件名HelloPython，点击OK，表示创建一个Python程序的文本文件，文本文件后缀名默认.py 输入以下代码，并右击空白处，选择Run运行，表示打印一个字符串\"Hello World!\"。 print(\"Hello World!\") 运行成功后，Pycharm Console窗口将显示我们的输出结果。 1.2. 练一练 要求：编写一个程序，输出你好啊，Python，这是我的第一个Python程序 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-25 18:53:11 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/注释.html":{"url":"python_basics/注释.html","title":"注释的使用","keywords":"","body":"1.1. 1. 注释的引入1.1.1. 看以下程序示例（未使用注释）1.1.2. 看以下程序示例（使用注释）1.1.3. 小总结（注释的作用）1.2. 2. 注释的分类1.2.1. 单行注释1.2.2. 多行注释1.2.3. python程序中，中文支持1.1. 1. 注释的引入 1.1.1. 看以下程序示例（未使用注释） 1.1.2. 看以下程序示例（使用注释） 1.1.3. 小总结（注释的作用） 通过用自己熟悉的语言，在程序中对某些代码进行标注说明，这就是注释的作用，能够大大增强程序的可读性 1.2. 2. 注释的分类 1.2.1. 单行注释 以#开头，#右边的所有东西当做说明，而不是真正要执行的程序，起辅助说明作用 # 我是注释，可以在里写一些功能说明之类的哦 print('hello world') 1.2.2. 多行注释 ''' 我是多行注释，可以写很多很多行的功能说明 下面的代码完成 ，打印一首诗 名字叫做：春江花月夜 ''' print('╔═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╗') print('║　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│ ║') print('║　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　║') print('║　│春│滟│江│空│江│江│人│不│白│谁│可│玉│此│鸿│昨│江│斜│不│　║') print('║　│江│滟│流│里│天│畔│生│知│云│家│怜│户│时│雁│夜│水│月│知│　║') print('║　│潮│随│宛│流│一│何│代│江│一│今│楼│帘│相│长│闲│流│沉│乘│　║') print('║　│水│波│转│霜│色│人│代│月│片│夜│上│中│望│飞│潭│春│沉│月│　║') print('║　│连│千│绕│不│无│初│无│待│去│扁│月│卷│不│光│梦│去│藏│几│　║') print('║春│海│万│芳│觉│纤│见│穷│何│悠│舟│徘│不│相│不│落│欲│海│人│　║') print('║江│平│里│甸│飞│尘│月│已│人│悠│子│徊│去│闻│度│花│尽│雾│归│　║') print('║花│，│，│，│，│，│，│，│，│，│，│，│，│，│，│，│，│，│，│　║') print('║月│海│何│月│汀│皎│江│江│但│青│何│应│捣│愿│鱼│可│江│碣│落│　║') print('║夜│上│处│照│上│皎│月│月│见│枫│处│照│衣│逐│龙│怜│潭│石│月│　║') print('║　│明│春│花│白│空│何│年│长│浦│相│离│砧│月│潜│春│落│潇│摇│　║') print('║　│月│江│林│沙│中│年│年│江│上│思│人│上│华│跃│半│月│湘│情│　║') print('║　│共│无│皆│看│孤│初│望│送│不│明│妆│拂│流│水│不│复│无│满│　║') print('║　│潮│月│似│不│月│照│相│流│胜│月│镜│还│照│成│还│西│限│江│　║') print('║　│生│明│霰│见│轮│人│似│水│愁│楼│台│来│君│文│家│斜│路│树│　║') print('║　│。│。│。│。│。│？│。│。│。│？│。│。│。│。│。│。│。│。│　║') print('║　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　║') print('║　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　│　║') print('╚═╧═╧═╧═╧═╧═╧═╧═╧═╧═╧═╧═╧═╧═╧═╧═╧═╧═╧═╧═╝') 1.2.3. python程序中，中文支持 python3中，是默认支持中文的，但是在python2中就需要一定的额外操作才可以 python2中，如果直接在程序中用到了中文，比如 print('你好') 如果直接运行输出，程序可能会出错： # 报错如下： SyntaxError: Non-ASCII character ‘\\xe4 ’ in file TestPy3/t.py 解决的办法为：在程序的开头写入如下代码，这就是中文注释 #coding=utf-8 修改之后的程序: #coding=utf-8 print('你好') 运行结果: 你好 注意： 在python的语法规范中推荐使用的方式： # -*- coding:utf-8 -*- Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-27 21:06:31 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/变量以及数据类型.html":{"url":"python_basics/变量以及数据类型.html","title":"变量以及类型","keywords":"","body":"1. 变量以及类型1.1. 变量的定义1.2. 变量的类型1. 变量以及类型 1.1. 变量的定义 在程序中，有时我们需要对2个数据进行求和，那么该怎样做呢？ 大家类比一下现实生活中，比如去超市买东西，往往咱们需要一个菜篮子，用来进行存储物品，等到所有的物品都购买完成后，在收银台进行结账即可 如果在程序中，需要把2个数据，或者多个数据进行求和的话，那么就需要把这些数据先存储起来，然后把它们累加起来即可 在Python中，存储一个数据，需要一个叫做变量的东西，如下示例: num1 = 100 # num1就是一个变量，就好比如一个小菜篮子 num2 = 87 # num2也是一个变量 result = num1 + num2 # 把num1和num2这两个\"菜篮子\"中的数据进行累加，然后放到 result变量中 说明: 所谓变量，可以理解为菜篮子，如果需要存储多个数据，最简单的方式是有多个变量，当然了也可以使用一个 程序就是用来处理数据的，而变量就是用来存储数据的 想一想：我们应该让变量占用多大的空间，保存什么样的数据？ 1.2. 变量的类型 生活中的“类型”的例子: 程序中: 为了更充分的利用内存空间以及更有效率的管理内存，变量是有不同的类型的，如下所示: 怎样知道一个变量的类型呢？ 在python中，只要定义了一个变量，而且它有数据，那么它的类型就已经确定了，不需要咱们开发者主动的去说明它的类型，系统会自动辨别 可以使用type()函数：type(变量的名字)，来查看变量的类型 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-25 19:32:58 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/标识符和关键字.html":{"url":"python_basics/标识符和关键字.html","title":"标识符和关键字","keywords":"","body":"1. 标识符和关键字1.1. 标识符1.2. 标识符的规则1.3. 命名规则1.4. 关键字1. 标识符和关键字 1.1. 标识符 什么是标识符，看下图: 开发人员在程序中自定义的一些符号和名称 标识符是自己定义的,如变量名 、函数名等 1.2. 标识符的规则 标识符由字母、下划线和数字组成，且数字不能开头 思考：下面的标识符哪些是正确的，哪些不正确为什么 fromNo12 from#12 my_Boolean my-Boolean Obj2 2ndObj myInt test1 Mike2jack My_tExt _test test!32 haha(da)tt int jack_rose jack&rose GUI G.U.I python中的标识符是区分大小写的 1.3. 命名规则 见名知意 起一个有意义的名字，尽量做到看一眼就知道是什么意思(提高代码可读性) 比如: 名字 就定义为 name , 学生 就用 student 定义 驼峰命名法 小驼峰式命名法（lower camel case）： 第一个单词以小写字母开始；第二个单词的首字母大写，例如：myName、aDog 大驼峰式命名法（upper camel case）： 每一个单字的首字母都采用大写字母，例如：FirstName、LastName 还有一种命名法是用下划线“_”来连接所有的单词，比如send_buf， Python的命令规则遵循PEP8标准，这个在后面会慢慢讲到。 1.4. 关键字 什么是关键字 python一些具有特殊功能的标识符，这就是所谓的关键字 关键字，是python已经使用的了，所以不允许开发者自己定义和关键字相同的名字的标识符 查看关键字: and as assert break class continue def del elif else except exec finally for from global if in import is lambda not or pass print raise return try while with yield 可以在Python Shell通过以下命令进行查看当前系统中python的关键字 >>> import keyword >>> keyword.kwlist 关键字的学习以及使用，咱们会在后面的课程中依一一进行学习。 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-25 19:37:12 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/输出.html":{"url":"python_basics/输出.html","title":"输出","keywords":"","body":"1. 输出1.1. 1. 普通的输出1.2. 2. 格式化输出1.2.1. 格式化操作的目的1.2.2. 什么是格式化1.2.3. 常用的格式符号1.3. 3. 换行输出1.4. 4. 练一练1. 输出 1.1. 1. 普通的输出 生活中的“输出” 软件中的“输出” python中变量的输出 # 打印提示 print('hello world') print('萨瓦迪卡---泰语，你好的意思') 1.2. 2. 格式化输出 1.2.1. 格式化操作的目的 比如有以下代码: pirnt(\"我今年10岁\") pirnt(\"我今年11岁\") pirnt(\"我今年12岁\") ... 想一想: 在输出年龄的时候，用了多次\"我今年xx岁\"，能否简化一下程序呢？？？ 答: 字符串格式化 1.2.2. 什么是格式化 看如下代码: age = 10 print(\"我今年%d岁\" % age) age += 1 print(\"我今年%d岁\" % age) age += 1 print(\"我今年%d岁\" % age) ... 在程序中，看到了%这样的操作符，这就是Python中格式化输出。 age = 18 name = \"xiaoming\" print(\"我的姓名是%s, 年龄是%d\" % (name, age)) 1.2.3. 常用的格式符号 下面是完整的，它可以与％符号使用列表: 格式符号 转换 %c 字符 %s 字符串 %d 有符号十进制整数 %u 无符号十进制整数 %o 八进制整数 %x 十六进制整数（小写字母0x） %X 十六进制整数（大写字母0X） %f 浮点数 %e 科学计数法（小写'e'） %E 科学计数法（大写“E”） %g ％f和％e 的简写 %G ％f和％E的简写 1.3. 3. 换行输出 \\n转义字符 在输出的时候，如果有\\n那么，此时\\n后的内容会在另外一行显示 print(\"1234567890-------\") # 会在一行显示 print(\"1234567890\\n-------\") # 一行显示1234567890，另外一行显示------- 1.4. 4. 练一练 编写代码完成以下名片的显示 ==========我的名片========== 姓名: python QQ:xxxxxxx 手机号:155xxxxxx 公司地址:北京市xxxx =========================== Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-25 19:47:28 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/输入.html":{"url":"python_basics/输入.html","title":"输入","keywords":"","body":"1. 输入1.1. 1. python2版本中1.1.1. 1.1 raw_input()1.1.2. 1.2 input()1.2. 2. python3版本中1. 输入 1.1. 1. python2版本中 咱们在银行ATM机器前取钱时，肯定需要输入密码，对不？ 那么怎样才能让程序知道咱们刚刚输入的是什么呢？？ 大家应该知道了，如果要完成ATM机取钱这件事情，需要先从键盘中输入一个数据，然后用一个变量来保存，是不是很好理解啊 1.1.1. 1.1 raw_input() 注意：raw_input()是在Python2版本中的输入函数 在Python2中，获取键盘输入的数据的方法是采用 raw_input 函数（至于什么是函数，咱们以后的章节中讲解），那么这个 raw_input 怎么用呢? 看如下示例: password = raw_input(\"请输入密码:\") # 小括号中放入的是，提示信息 print'您刚刚输入的密码是:%d' % password 运行结果: >>> password = raw_input() 请输入密码:123456 >>> print password 您刚刚输入的密码是:123456 注意: raw_input()的小括号中放入的是，提示信息，用来在获取数据之前给用户的一个简单提示 raw_input()在从键盘获取了数据以后，会存放到等号右边的变量中 raw_input()会把用户输入的任何值都作为字符串来对待 1.1.2. 1.2 input() Python3版本中的输入函数 input()函数与raw_input()类似，但其接受的输入必须是表达式。 >>> a = input() 123 >>> a 123 >>> type(a) >>> a = input() abc Traceback (most recent call last): File \"\", line 1, in File \"\", line 1, in NameError: name 'abc' is not defined >>> a = input() \"abc\" >>> a 'abc' >>> type(a) >>> a = input() 1+3 >>> a 4 >>> a = input() \"abc\"+\"def\" >>> a 'abcdef' >>> value = 100 >>> a = input() value >>> a 100 input()接受表达式输入，并把表达式的结果赋值给等号左边的变量 1.2. 2. python3版本中 没有raw_input()函数，只有input() 并且 python3中的input与python2中的raw_input()功能一样 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-29 19:43:36 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/运算符.html":{"url":"python_basics/运算符.html","title":"运算符","keywords":"","body":"1. 运算符1.1.1. 1. 算术运算符1.1.2. 2. 赋值运算符1. 运算符 python支持以下几种运算符 1.1.1. 1. 算术运算符 下面以a=10 ,b=20为例进行计算 运算符 描述 实例 + 加 两个对象相加 a + b 输出结果 30 - 减 得到负数或是一个数减去另一个数 a - b 输出结果 -10 * 乘 两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200 / 除 b / a 输出结果 2 // 取整除 返回商的整数部分 9//2 输出结果 4 , 9.0//2.0 输出结果 4.0 % 取余 返回除法的余数 b % a 输出结果 0 ** 指数 a**b 为10的20次方， 输出结果 100000000000000000000 注意：混合运算时，优先级顺序为： ** 高于 * / % // 高于 + - ，为了避免歧义，建议使用 () 来处理运算符优先级。 并且，不同类型的数字在进行混合运算时，整数将会转换成浮点数进行运算。 >>> 10 + 5.5 * 2 21.0 >>> 10 + (5.5 * 2) 21.0 1.1.2. 2. 赋值运算符 运算符 描述 实例 = 赋值运算符 把 = 号右边的结果 赋给 左边的变量，如 num = 1 + 2 * 3，结果num的值为7 # 单个变量赋值 >>> num = 10 >>> num 10 # 多个变量赋值 >>> num1, num2, f1, str1 = 100, 200, 3.14, \"hello\" >>> num1 100 >>> num2 200 >>> f1 3.14 >>> str1 \"hello\" 复合赋值运算符 运算符 描述 实例 += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c = a 等效于 c = c a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c = a 等效于 c = c a //= 取整除赋值运算符 c //= a 等效于 c = c // a Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:05:54 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/数据类型转换.html":{"url":"python_basics/数据类型转换.html","title":"数据类型转换","keywords":"","body":"1. 常用的数据类型转换1.1. 举例1. 常用的数据类型转换 函数 说明 int(x [,base ]) 将x转换为一个整数 float(x ) 将x转换为一个浮点数 complex(real [,imag ]) 创建一个复数，real为实部，imag为虚部 str(x ) 将对象 x 转换为字符串 repr(x ) 将对象 x 转换为表达式字符串 eval(str ) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s ) 将序列 s 转换为一个元组 list(s ) 将序列 s 转换为一个列表 chr(x ) 将一个整数转换为一个Unicode字符 ord(x ) 将一个字符转换为它的ASCII整数值 hex(x ) 将一个整数转换为一个十六进制字符串 oct(x ) 将一个整数转换为一个八进制字符串 bin(x ) 将一个整数转换为一个二进制字符串 1.1. 举例 >>> # int(): 将数据转换为 int 类型 ... >>> str1 = \"10\" >>> # int() 默认按10进制转换后显示 ... num1 = int(str1) >>> >>> # int() 处理浮点数，只留下整数部分，舍弃小数部分（并不是四舍五入操作） ... num2 = int(3.74) >>> print(num2) 3 >>> >>> \"\"\" ... num1 = int(str1, 8) # 第二个参数为8，表示按8进制转换后显示，结果为 8 ... num1 = int(str1, 16) # # 第二个参数为16，表示按16进制转换后显示，结果为 16 ... #01 02 03 04 05 06 07 10 ... #01 02 ... 0B 0C 0D 0E 0F 10 ... print(num1) ... \"\"\" >>> >>> # float() 将数据转化为浮点数 ... str2 = \"3.14\" >>> f1 = float(str2) >>> print(type(f1)) >>> >>> f2 = float(10) >>> print(f2) 10.0 >>> >>> # complex() 创建复数: 第一个参数是复数的实部，第二个参数是复数的虚部 ... c1 = 10 + 4j >>> c2 = complex(10, 4) >>> >>> print(c1) (10+4j) >>> print(c2) # 等同与c1 (10+4j) >>> >>> # str() : 转换为 字符串类型 ... num1 = 10 >>> f1 = 3.14 >>> >>> print(type(str(num1))) >>> print(type(str(f1))) >>> >>> # repr()： 转换为表达式字符串 ... num1 = 10 >>> print(type(repr(num1))) >>> >>> >>> # eval(): 将字符串形式的数据，转换为原本的类型 ... str1 = \"3.14\" >>> print(type(eval(str1))) >>> >>> str2 = \"[10, 20, 30]\" >>> l = eval(str2) >>> print(type(l)) >>> >>> >>> # chr: 将一个整数转换为对应的 Unicode 字符 ... s = chr(1065) >>> print(s) Щ >>> >>> # ord ：将一个字符转换为对应的字符编码数字 ... n = ord(\"A\") >>> print(n) 65 >>> >>> # bin: 将一个整数转换为二进制 ... print(bin(1024)) # 0b 开头表示二进制数 0b10000000000 >>> >>> # oct：将一个整数转换为八进制 ... print(oct(1024)) # 0o 开头表示八进制数 0o2000 >>> >>> # hex: 将一个整数转换为十六进制 ... print(hex(1024)) # 0x 开头表示十六进制 0x400 >>> 附录：常用字符与ASCII码对照表 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:06:29 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/判断语句介绍.html":{"url":"python_basics/判断语句介绍.html","title":"判断语句介绍","keywords":"","body":"1. 判断语句介绍1.1. 生活中的判断场景1. 判断语句介绍 1.1. 生活中的判断场景 火车站安检 上网吧 密码判断 小总结： 如果某些条件满足，才能做某件事情；条件不满足时，则不能做，这就是所谓的判断。 不仅生活中有，在软件开发中\"判断\"功能也经常会用到 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:20:00 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/if语句.html":{"url":"python_basics/if语句.html","title":"if语句","keywords":"","body":"if判断语句 if判断语句介绍 if语句是用来进行判断的，其使用格式如下： if 要判断的条件: 条件成立时，要做的事情 demo1:（demo的中文意思：演示、案例） age = 30 print(\"------if判断开始------\") if age >= 18: print(\"我已经成年了\") print(\"------if判断结束------\") 运行结果: ------if判断开始------ 我已经成年了 ------if判断结束------ demo2: age = 16 print(\"------if判断开始------\") if age >= 18: print(\"我已经成年了\") print(\"------if判断结束------\") 运行结果: ------if判断开始------ ------if判断结束------小总结： 以上2个demo仅仅是age变量的值不一样，导致结果却不同；能够看得出if判断语句的作用：就是当满足一定条件时才会执行代码块语句，否则就不执行代码块语句。 注意：代码的缩进为一个tab键，或者4个空格 练一练 要求：从键盘获取自己的年龄，判断是否大于或者等于18岁，如果满足就输出“哥，已成年，网吧可以去了” 使用input从键盘中获取数据，并且存入到一个变量中 使用if语句，来判断 age>=18是否成立 想一想 判断age大于或者等于18岁使用的是 >=，如果是其他判断，还有哪些呢？ Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-03-03 20:07:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/比较、关系运算符.html":{"url":"python_basics/比较、关系运算符.html","title":"比较、关系运算符","keywords":"","body":"1. 比较(即关系)运算符2. 逻辑运算符1. 比较(即关系)运算符 python中的比较运算符如下表 运算符 描述 示例 == 检查两个操作数的值是否相等，如果是则条件变为真。 如a=3,b=3，则（a == b) 为 True != 检查两个操作数的值是否相等，如果值不相等，则条件变为真。 如a=1,b=3，则(a != b) 为 True > 检查左操作数的值是否大于右操作数的值，如果是，则条件成立。 如a=7,b=3，则(a > b) 为 True 检查左操作数的值是否小于右操作数的值，如果是，则条件成立。 如a=7,b=3，则(a >= 检查左操作数的值是否大于或等于右操作数的值，如果是，则条件成立。 如a=3,b=3，则(a >= b) 为 True 检查左操作数的值是否小于或等于右操作数的值，如果是，则条件成立。 如a=3,b=3，则(a >>> ## 关系运算符 ... >>> # == 等于：表示左右两个操作数是否相等，如果相等则整个表达式的值为 True；不相等则为False ... num1 = 15 >>> num2 = 20 >>> >>> print(num1 == num2) False >>> >>> # != 不等于 ... print(num1 != num2) True >>> >>> # > 大于 ... print(num1 > num2) False >>> >>> # >> >>> # >= 大于等于: num1 大于 或者 等于 num2 ，条件都成立 ... print(num1 >= num2) False >>> >>> # >> >>> if num1 >= num2: ... print(\"条件成立！\") ... >>> 2. 逻辑运算符 运算符 逻辑表达式 描述 实例 and x and y 布尔\"与\"：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。 True and False， 返回 False。 or x or y 布尔\"或\"：如果 x 是 True，它返回 True，否则它返回 y 的值。 False or True， 返回 True。 not not x 布尔\"非\"：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not True 返回 False, not False 返回 True >>> ## 逻辑运算符 ... >>> # and : 左右表达式都为True，整个表达式结果才为 True ... if (1 == 1) and (10 > 3): ... print(\"条件成立！\") ... 条件成立！ >>> # or : 左右表达式有一个为True，整个表达式结果就为 True ... if (1 == 2) or (10 > 3): ... print(\"条件成立！\") ... 条件成立！ >>> # not：将右边表达式的逻辑结果取反，Ture变为False，False变为True ... if not (1 == 2): ... print(\"条件成立！\") ... 条件成立！ >>> Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-03-08 22:12:02 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/if-else.html":{"url":"python_basics/if-else.html","title":"if-else","keywords":"","body":"1. if-else1.1. if-else的使用格式1.2. 练一练1. if-else 想一想：在使用if的时候，它只能做到满足条件时要做的事情。那万一需要在不满足条件的时候，做某些事，该怎么办呢？ 答：使用 if-else 1.1. if-else的使用格式 if 条件: 满足条件时要做的事情1 满足条件时要做的事情2 满足条件时要做的事情3 ...(省略)... else: 不满足条件时要做的事情1 不满足条件时要做的事情2 不满足条件时要做的事情3 ...(省略)... demo1 chePiao = 1 # 用1代表有车票，0代表没有车票 if chePiao == 1: print(\"有车票，可以上火车\") print(\"终于可以见到Ta了，美滋滋~~~\") else: print(\"没有车票，不能上车\") print(\"亲爱的，那就下次见了\"） 结果1：有车票的情况 有车票，可以上火车 终于可以见到Ta了，美滋滋~~~ 结果2：没有车票的情况 没有车票，不能上车 亲爱的，那就下次见了 1.2. 练一练 要求：从键盘输入身高，如果身高没有超过150cm，则进动物园不用买票，否则需要买票。 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:23:46 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/elif.html":{"url":"python_basics/elif.html","title":"elif","keywords":"","body":"1. elif1.1. elif的功能1.2. 注意点1. elif 想一想: if能完成当xxx时做事情 if-else能完成当xxx时做事情1，否则做事情2 如果有这样一种情况：当xxx1满足时做事情1；当xxx1不满足、xxx2满足时做事情2；当xxx2不满足、xxx3满足时做事情3，那该怎么实现呢？ 答: elif 1.1. elif的功能 elif的使用格式如下: if xxx1: 事情1 elif xxx2: 事情2 elif xxx3: 事情3 说明: 当xxx1满足时，执行事情1，然后整个if结束 当xxx1不满足时，那么判断xxx2，如果xxx2满足，则执行事情2，然后整个if结束 当xxx1不满足时，xxx2也不满足，如果xxx3满足，则执行事情3，然后整个if结束 demo: score = 77 if score>=90 and score=80 and score=70 and score=60 and score=0 and score 1.2. 注意点 可以和else一起使用 if 性别为男性: 输出男性的体重 ... elif 性别为女性: 输出女性的体重 ... else: 第三种性别的体重 ... 说明: 当 “性别为男性” 满足时，执行 “输出男性的体重”的相关代码 当 “性别为男性” 不满足时，如果 “性别为女性”满足，则执行 “输出女性的体重”的相关代码 当 “性别为男性” 不满足，“性别为女性”也不满足，那么久默认执行else后面的代码，即 “第三种性别的体重”相关代码 elif必须和if一起使用，否则出错 else 一般用在最后，即所有条件都不满足时使用 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:24:02 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/if嵌套.html":{"url":"python_basics/if嵌套.html","title":"if嵌套","keywords":"","body":"1. if嵌套1.1. if嵌套的格式1.2. if嵌套的应用1.3. 练一练1. if嵌套 通过学习if的基本用法，已经知道了 当需要满足条件去做事情的这种情况需要使用if 当满足条件时做事情A，不满足条件做事情B的这种情况使用if-else 想一想： 坐火车或者地铁的实际情况是：先进行安检如果安检通过才会判断是否有车票，或者是先检查是否有车票之后才会进行安检，即实际的情况某个判断是再另外一个判断成立的基础上进行的，这样的情况该怎样解决呢？ 答： if嵌套 1.1. if嵌套的格式 if 条件1: 满足条件1 做的事情1 满足条件1 做的事情2 if 条件2: 满足条件2 做的事情1 满足条件2 做的事情2 说明 外层的if判断，也可以是if-else 内层的if判断，也可以是if-else 根据实际开发的情况，进行选择 1.2. if嵌套的应用 demo： chePiao = 1 # 用1代表有车票，0代表没有车票 daoLenght = 9 # 刀子的长度，单位为cm if chePiao == 1: print(\"有车票，可以进站\") if daoLenght 结果1：chePiao = 1;daoLenght = 9 有车票，可以进站 通过安检 终于可以见到Ta了，美滋滋~~~ 结果2：chePiao = 1;daoLenght = 20 有车票，可以进站 没有通过安检 刀子的长度超过规定，等待警察处理... 结果3：chePiao = 0;daoLenght = 9 没有车票，不能进站 亲爱的，那就下次见了 结果4：chePiao = 0;daoLenght = 20 没有车票，不能进站 亲爱的，那就下次见了 想一想:为什么结果3和结果4相同？？？ 1.3. 练一练 情节描述：上公交车，并且可以有座位坐下 要求：输入公交卡当前的余额，只要超过2元，就可以上公交车；如果车上有空座位，就可以坐下。 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:24:16 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/if应用：猜拳游戏.html":{"url":"python_basics/if应用：猜拳游戏.html","title":"if应用：猜拳游戏","keywords":"","body":"1. 应用:猜拳游戏1.1. 运行效果:1.2. 参考代码:1. 应用:猜拳游戏 1.1. 运行效果: 1.2. 参考代码: import random player = input('请输入：剪刀(0) 石头(1) 布(2):') player = int(player) # 产生随机整数：0、1、2 中的某一个 computer = random.randint(0,2) # 用来进行测试 #print('player=%d,computer=%d',(player,computer)) if ((player == 0) and (computer == 2)) or ((player ==1) and (computer == 0)) or ((player == 2) and (computer == 1)): print('获胜，哈哈，你太厉害了') elif player == computer: print('平局，要不再来一局') else: print('输了，不要走，洗洗手接着来，决战到天亮') Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:24:51 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/循环语句介绍.html":{"url":"python_basics/循环语句介绍.html","title":"循环语句介绍","keywords":"","body":"1. 循环介绍1.1. 生活中的循环场景1.2. 软件开发中循环的使用场景1.3. 小总结1. 循环介绍 1.1. 生活中的循环场景 跑道 风扇 CF加特林 1.2. 软件开发中循环的使用场景 跟媳妇承认错误，说一万遍\"媳妇儿，我错了\" print(\"媳妇儿，我错了\") print(\"媳妇儿，我错了\") print(\"媳妇儿，我错了\") ...(还有99997遍)... 使用循环语句一句话搞定 i = 0 while i 1.3. 小总结 while和if的用法基本类似，区别在于：if 条件成立，则执行一次； while 条件成立，则重复执行，直到条件不成立为止。 一般情况下，需要多次重复执行的代码，都可以用循环的方式来完成 循环不是必须要使用的，但是为了提高代码的重复使用率，所以有经验的开发者都会采用循环 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:25:53 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/while循环.html":{"url":"python_basics/while循环.html","title":"while循环","keywords":"","body":"1. while循环1.1. while循环的格式1. while循环 1.1. while循环的格式 while 条件: 条件满足时，做的事情1 条件满足时，做的事情2 条件满足时，做的事情3 ...(省略)... demo i = 0 while i 结果: 当前是第1次执行循环 i=0 当前是第2次执行循环 i=1 当前是第3次执行循环 i=2 当前是第4次执行循环 i=3 当前是第5次执行循环 i=4 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:26:58 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/while循环应用.html":{"url":"python_basics/while循环应用.html","title":"while循环应用","keywords":"","body":"1. while循环应用1.1. 1. 计算1~100的累积和（包含1和100）1.2. 2. 计算1~100之间偶数的累积和（包含1和100）1. while循环应用 1.1. 1. 计算1~100的累积和（包含1和100） 参考代码如下: #encoding=utf-8 i = 1 sum = 0 while i 1.2. 2. 计算1~100之间偶数的累积和（包含1和100） 参考代码如下: #encoding=utf-8 i = 1 sum = 0 while i Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:29:55 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/while循环的嵌套以及应用[重难点].html":{"url":"python_basics/while循环的嵌套以及应用[重难点].html","title":"while循环的嵌套以及应用(重难点)","keywords":"","body":"1. while循环嵌套1.1. while嵌套的格式1.2. while嵌套应用一1.3. while嵌套应用二：九九乘法表1. while循环嵌套 前面学习过if的嵌套了，想一想if嵌套是什么样子的？ 类似if的嵌套，while嵌套就是：while里面还有while 1.1. while嵌套的格式 while 条件1: 条件1满足时，做的事情1 条件1满足时，做的事情2 条件1满足时，做的事情3 ...(省略)... while 条件2: 条件2满足时，做的事情1 条件2满足时，做的事情2 条件2满足时，做的事情3 ...(省略)... 1.2. while嵌套应用一 要求：打印如下图形： * * * * * * * * * * * * * * * 参考代码： i = 1 while i 1.3. while嵌套应用二：九九乘法表 参考代码： i = 1 while i Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:30:26 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/for循环.html":{"url":"python_basics/for循环.html","title":"for循环","keywords":"","body":"1. for循环1.1. for循环的格式1.1.1. demo11.1.2. demo21.1.3. demo31. for循环 像while循环一样，for可以完成循环的功能。 在Python中 for循环可以遍历任何序列的项目，如一个列表或者一个字符串等。 1.1. for循环的格式 for 临时变量 in 列表或者字符串等可迭代对象: 循环满足条件时执行的代码 1.1.1. demo1 name = 'itheima' for x in name: print(x) 运行结果如下: i t h e i m a 1.1.2. demo2 >>> for x in name: print(x) if x == 'l': print(\"Hello world!\") 运行结果如下: h e l Hello world! l Hello world! o 1.1.3. demo3 # range(5) 在python就业班中进行讲解会牵扯到迭代器的知识， # 作为刚开始学习python的我们，此阶段仅仅知道range(5)表示可以循环5次即可 for i in range(5): print(i) ''' 效果等同于 while 循环的： i = 0 while i 运行结果如下: 0 1 2 3 4 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:30:56 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/break和continue.html":{"url":"python_basics/break和continue.html","title":"break和continue","keywords":"","body":"1. break和continue1.1. 1. break1.1.1. for循环1.1.2. while循环1.1.3. 小结:1.2. 2. continue1.2.1. for循环1.2.2. while循环1.2.3. 小结:1.3. 3. 注意点1. break和continue 1.1. 1. break 1.1.1. for循环 普通的循环示例如下： name = 'itheima' for x in name: print('----') print(x) else: print(\"==for循环过程中，如果没有执行break退出，则执行本语句==\") 运行结果: ---- i ---- t ---- h ---- e ---- i ---- m ---- a ==for循环过程中，如果没有break则执行== 带有break的循环示例如下: name = 'itheima' for x in name: print('----') if x == 'e': break print(x) else: print(\"==for循环过程中，如果没有执行break退出，则执行本语句==\") 运行结果: ---- i ---- t ---- h ---- 1.1.2. while循环 普通的循环示例如下： i = 0 while i 运行结果: ---- 1 ---- 2 ---- 3 ---- 4 ---- 5 ==while循环过程中，如果没有break则执行== 带有break的循环示例如下: i = 0 while i 运行结果: ---- 1 ---- 2 ---- 1.1.3. 小结: break的作用：立刻结束break所在的循环 1.2. 2. continue 1.2.1. for循环 带有continue的循环示例如下: name = 'itheima' for x in name: print('----') if x == 'e': continue print(x) else: print(\"==while循环过程中，如果没有break则执行==\") 运行结果: ---- i ---- t ---- h ---- ---- i ---- m ---- a ==while循环过程中，如果没有break则执行== 1.2.2. while循环 带有continue的循环示例如下: i = 0 while i 运行结果: ---- 1 ---- 2 ---- ---- 4 ---- 5 1.2.3. 小结: continue的作用：用来结束本次循环，紧接着执行下一次的循环 1.3. 3. 注意点 break/continue只能用在循环中，除此以外不能单独使用 break/continue在嵌套循环中，只对最近的一层循环起作用 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 16:31:08 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/字符串介绍.html":{"url":"python_basics/字符串介绍.html","title":"字符串介绍","keywords":"","body":"1. 字符串介绍1.1. python中字符串的格式1. 字符串介绍 1.1. python中字符串的格式 如下定义的变量a，存储的是数字类型的值 a = 100 如下定义的变量b，存储的是字符串类型的值 b = \"hello world\" 或者 b = 'hello world' # b = '''hello world''' 小总结： 双引号或者单引号中的数据，就是字符串 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 20:55:37 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/字符串输出.html":{"url":"python_basics/字符串输出.html","title":"字符串输出","keywords":"","body":"1. 字符串输出1. 字符串输出 demo name = 'jiaxiaochu' position = '讲师' address = '北京市' print('--------------------------------------------------') print(\"姓名：%s\" % name) print(\"职位：%s\" % position) print(\"公司地址：%s\" % address) print('--------------------------------------------------') 结果: -------------------------------------------------- 姓名： jiaoxiaochu 职位： 讲师 公司地址： 北京市 -------------------------------------------------- Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 20:56:08 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/字符串输入.html":{"url":"python_basics/字符串输入.html","title":"字符串输入","keywords":"","body":"1. 字符串输入1. 字符串输入 之前在学习input的时候，通过它能够完成从键盘获取数据，然后保存到指定的变量中； 注意：input获取的数据，都以字符串的方式进行保存，即使输入的是数字，那么也是以字符串方式保存 demo: userName = input('请输入用户名:') print(\"用户名为：%s\" % userName) password = input('请输入密码:') print(\"密码为：%s\" % password) 结果：（根据输入的不同结果也不同） 请输入用户名:jiaxiaochu 用户名为： jiaxiaochu 请输入密码:haohaoxuexitiantianxiangshang 密码为： haohaoxuexitiantianxiangshang Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 20:57:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/下标和切片.html":{"url":"python_basics/下标和切片.html","title":"下标和切片","keywords":"","body":"1. 下标和切片1.1. 1. 下标索引1.2. 2. 切片1.2.1. 想一想1. 下标和切片 1.1. 1. 下标索引 所谓“下标”，就是编号，就好比超市中的存储柜的编号，通过这个编号就能找到相应的存储空间 生活中的 \"下标\" 超市储物柜 高铁二等座 高铁一等座 绿皮车 字符串中\"下标\"的使用 列表与元组支持下标索引好理解，字符串实际上就是字符的数组，所以也支持下标索引。 如果有字符串:name = 'abcdef'，在内存中的实际存储如下: 如果想取出部分字符，那么可以通过下标的方法，（注意python中下标从 0 开始） name = 'abcdef' print(name[0]) print(name[1]) print(name[2]) 运行结果: a b c 1.2. 2. 切片 切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作。 切片的语法：[起始:结束:步长] 注意：选取的区间从\"起始\"位开始，到\"结束\"位的前一位结束（不包含结束位本身)，步长表示选取间隔。 我们以字符串为例讲解。 如果取出一部分，则可以在中括号[]中，使用: name = 'abcdef' print(name[0:3]) # 取 下标0~2 的字符 运行结果: name = 'abcdef' print(name[0:5]) # 取 下标为0~4 的字符 运行结果: name = 'abcdef' print(name[3:5]) # 取 下标为3、4 的字符 运行结果: name = 'abcdef' print(name[2:]) # 取 下标为2开始到最后的字符 运行结果: name = 'abcdef' print(name[1:-1]) # 取 下标为1开始 到 最后第2个 之间的字符 运行结果: >>> a = \"abcdef\" >>> a[:3] 'abc' >>> a[::2] 'ace' >>> a[5:1:2] '' >>> a[1:5:2] 'bd' >>> a[::-2] 'fdb' >>> a[5:1:-2] 'fd' 1.2.1. 想一想 （面试题）给定一个字符串aStr, 请反转字符串 # 索引是通过下标取某一个元素 # 切片是通过下标去某一段元素 s = 'Hello World!' print(s[4]) print(s) print(s[:]) # 取出所有元素（没有起始位和结束位之分），默认步长为1 print(s[1:]) # 从下标为1开始，取出 后面所有的元素（没有结束位） print(s[:5]) # 从起始位置开始，取到 下标为5的前一个元素（不包括结束位本身） print(s[:-1]) # 从起始位置开始，取到 倒数第一个元素（不包括结束位本身） print(s[-4:-1]) # 从倒数第4个元素开始，取到 倒数第1个元素（不包括结束位本身） print(s[1:5:2]) # 从下标为1开始，取到下标为5的前一个元素，步长为2（不包括结束位本身） # python 字符串快速逆置 print(s[::-1]) # 从后向前，按步长为1进行取值 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 20:59:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/字符串常见操作.html":{"url":"python_basics/字符串常见操作.html","title":"字符串常见操作","keywords":"","body":"1. 字符串常见操作1. 字符串常见操作 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 20:50:30 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/列表介绍.html":{"url":"python_basics/列表介绍.html","title":"列表介绍","keywords":"","body":"1. 列表介绍1.1. 列表的格式1.2. 打印列表1. 列表介绍 想一想： 前面学习的字符串可以用来存储一串信息，那么想一想，怎样存储咱们班所有同学的名字呢？ 定义100个变量，每个变量存放一个学生的姓名可行吗？有更好的办法吗？ 答： 列表 1.1. 列表的格式 变量A的类型为列表 namesList = ['xiaoWang','xiaoZhang','xiaoHua'] 比C语言的数组强大的地方在于列表中的元素可以是不同类型的 testList = [1, 'a'] 1.2. 打印列表 demo: namesList = ['xiaoWang','xiaoZhang','xiaoHua'] print(namesList[0]) print(namesList[1]) print(namesList[2]) 结果： xiaoWang xiaoZhang xiaoHua Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 21:03:39 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/列表的循环遍历.html":{"url":"python_basics/列表的循环遍历.html","title":"列表的循环遍历","keywords":"","body":"1. 列表的循环遍历1.1. 1. 使用for循环1.2. 2. 使用while循环1. 列表的循环遍历 1.1. 1. 使用for循环 为了更有效率的输出列表的每个数据，可以使用循环来完成 demo: namesList = ['xiaoWang','xiaoZhang','xiaoHua'] for name in namesList: print(name) 结果: xiaoWang xiaoZhang xiaoHua 1.2. 2. 使用while循环 为了更有效率的输出列表的每个数据，可以使用循环来完成 demo: namesList = ['xiaoWang','xiaoZhang','xiaoHua'] length = len(namesList) i = 0 while i 结果: xiaoWang xiaoZhang xiaoHua Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 21:03:54 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/列表的常见操作.html":{"url":"python_basics/列表的常见操作.html","title":"列表的常见操作","keywords":"","body":"1. 列表的相关操作1.1. 添加元素(\"增\"append, extend, insert)1.2. 修改元素(\"改\")1.3. 查找元素(\"查\"in, not in, index, count)1.4. 删除元素(\"删\"del, pop, remove)1.5. 排序(sort, reverse)1. 列表的相关操作 列表中存放的数据是可以进行修改的，比如\"增\"、\"删\"、\"改\"、\"查\" 1.1. 添加元素(\"增\"append, extend, insert) append 通过append可以向列表添加元素 demo: #定义变量A，默认有3个元素 A = ['xiaoWang','xiaoZhang','xiaoHua'] print(\"-----添加之前，列表A的数据-----\") for tempName in A: print(tempName) #提示、并添加元素 temp = input('请输入要添加的学生姓名:') A.append(temp) print(\"-----添加之后，列表A的数据-----\") for tempName in A: print(tempName) 结果: extend 通过extend可以将另一个集合中的元素逐一添加到列表中 >>> a = [1, 2] >>> b = [3, 4] >>> a.append(b) >>> a [1, 2, [3, 4]] >>> a.extend(b) >>> a [1, 2, [3, 4], 3, 4] insert insert(index, object) 在指定位置index前插入元素object >>> a = [0, 1, 2] >>> a.insert(1, 3) >>> a [0, 3, 1, 2] 1.2. 修改元素(\"改\") 修改元素的时候，要通过下标来确定要修改的是哪个元素，然后才能进行修改 demo: #定义变量A，默认有3个元素 A = ['xiaoWang','xiaoZhang','xiaoHua'] print(\"-----修改之前，列表A的数据-----\") for tempName in A: print(tempName) #修改元素 A[1] = 'xiaoLu' print(\"-----修改之后，列表A的数据-----\") for tempName in A: print(tempName) 结果: -----修改之前，列表A的数据----- xiaoWang xiaoZhang xiaoHua -----修改之后，列表A的数据----- xiaoWang xiaoLu xiaoHua 1.3. 查找元素(\"查\"in, not in, index, count) 所谓的查找，就是看看指定的元素是否存在 in, not in python中查找的常用方法为： in（存在）,如果存在那么结果为true，否则为false not in（不存在），如果不存在那么结果为true，否则false demo #待查找的列表 nameList = ['xiaoWang','xiaoZhang','xiaoHua'] #获取用户要查找的名字 findName = input('请输入要查找的姓名:') #查找是否存在 if findName in nameList: print('在字典中找到了相同的名字') else: print('没有找到') 结果1：(找到) 结果2：(没有找到) 说明： in的方法只要会用了，那么not in也是同样的用法，只不过not in判断的是不存在 index, count index和count与字符串中的用法相同 >>> a = ['a', 'b', 'c', 'a', 'b'] >>> a.index('a', 1, 3) # 注意是左闭右开区间 Traceback (most recent call last): File \"\", line 1, in ValueError: 'a' is not in list >>> a.index('a', 1, 4) 3 >>> a.count('b') 2 >>> a.count('d') 0 1.4. 删除元素(\"删\"del, pop, remove) 类比现实生活中，如果某位同学调班了，那么就应该把这个条走后的学生的姓名删除掉；在开发中经常会用到删除这种功能。 列表元素的常用删除方法有： del：根据下标进行删除 pop：删除最后一个元素 remove：根据元素的值进行删除 demo:(del) movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------') for tempName in movieName: print(tempName) del movieName[2] print('------删除之后------') for tempName in movieName: print(tempName) 结果: ------删除之前------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 速度与激情 ------删除之后------ 加勒比海盗 骇客帝国 指环王 霍比特人 速度与激情 demo:(pop) movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------') for tempName in movieName: print(tempName) movieName.pop() print('------删除之后------') for tempName in movieName: print(tempName) 结果: ------删除之前------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 速度与激情 ------删除之后------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 demo:(remove) movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------') for tempName in movieName: print(tempName) movieName.remove('指环王') print('------删除之后------') for tempName in movieName: print(tempName) 结果: ------删除之前------ 加勒比海盗 骇客帝国 第一滴血 指环王 霍比特人 速度与激情 ------删除之后------ 加勒比海盗 骇客帝国 第一滴血 霍比特人 速度与激情 1.5. 排序(sort, reverse) sort方法是将list按特定顺序重新排列，默认为由小到大，参数reverse=True可改为倒序，由大到小。 reverse方法是将list逆置。 >>> a = [1, 4, 2, 3] >>> a [1, 4, 2, 3] >>> a.reverse() >>> a [3, 2, 4, 1] >>> a.sort() >>> a [1, 2, 3, 4] >>> a.sort(reverse=True) >>> a [4, 3, 2, 1] Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 21:04:09 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/列表的嵌套.html":{"url":"python_basics/列表的嵌套.html","title":"列表的嵌套","keywords":"","body":"1. 列表的嵌套1.1. 1. 列表嵌套1.2. 2. 应用1. 列表的嵌套 1.1. 1. 列表嵌套 类似while循环的嵌套，列表也是支持嵌套的 一个列表中的元素又是一个列表，那么这就是列表的嵌套 schoolNames = [['北京大学','清华大学'], ['南开大学','天津大学','天津师范大学'], ['山东大学','中国海洋大学']] 1.2. 2. 应用 一个学校，有3个办公室，现在有8位老师等待工位的分配，请编写程序，完成随机的分配 #encoding=utf-8 import random # 定义一个列表用来保存3个办公室 offices = [[],[],[]] # 定义一个列表用来存储8位老师的名字 names = ['A','B','C','D','E','F','G','H'] i = 0 for name in names: index = random.randint(0,2) offices[index].append(name) i = 1 for tempNames in offices: print('办公室%d的人数为:%d'%(i,len(tempNames))) i+=1 for name in tempNames: print(\"%s\"%name,end='') print(\"\\n\") print(\"-\"*20) 运行结果如下: 办公室的1的人数为：4 ABCE 办公室的2的人数为：3 DGH 办公室的3的人数为：1 F Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 21:06:57 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/元组.html":{"url":"python_basics/元组.html","title":"元组","keywords":"","body":"1. 元组1. 元组 Python的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号。 >>> aTuple = ('et',77,99.9) >>> aTuple ('et',77,99.9) 访问元组 修改元组 说明： python中不允许修改元组的数据，包括不能删除其中的元素。 count, index index和count与字符串和列表中的用法相同 >>> a = ('a', 'b', 'c', 'a', 'b') >>> a.index('a', 1, 3) # 注意是左闭右开区间 Traceback (most recent call last): File \"\", line 1, in ValueError: tuple.index(x): x not in tuple >>> a.index('a', 1, 4) 3 >>> a.count('b') 2 >>> a.count('d') 0 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2021-07-04 01:17:06 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/字典介绍.html":{"url":"python_basics/字典介绍.html","title":"字典介绍","keywords":"","body":"1. 字典介绍1.1. 生活中的字典1.2. 软件开发中的字典1.3. 根据键访问值1. 字典介绍 想一想： 如果有列表 nameList = ['xiaoZhang', 'xiaoWang', 'xiaoLi']; 需要对\"xiaoWang\"这个名字写错了，通过代码修改： nameList[1] = 'xiaoxiaoWang' 如果列表的顺序发生了变化，如下 nameList = ['xiaoWang', 'xiaoZhang', 'xiaoLi']; 此时就需要修改下标，才能完成名字的修改 nameList[0] = 'xiaoxiaoWang' 有没有方法，既能存储多个数据，还能在访问元素的很方便就能够定位到需要的那个元素呢？ 答： 字典 另一个场景： 学生信息列表，每个学生信息包括学号、姓名、年龄等，如何从中找到某个学生的信息？ >>> studens = [[1001, \"王bao强\", 24], [1002, \"马rong\", 23], [1005, \"宋x\"，24], ...] 循环遍历？ No！ 1.1. 生活中的字典 1.2. 软件开发中的字典 变量info为字典类型： info = {'name':'班长', 'id':100, 'sex':'f', 'address':'地球亚洲中国北京'} 说明： 字典和列表一样，也能够存储多个数据 列表中找某个元素时，是根据下标进行的 字典中找某个元素时，是根据'名字'（就是冒号:前面的那个值，例如上面代码中的'name'、'id'、'sex'） 字典的每个元素由2部分组成，键:值。例如 'name':'班长' ,'name'为键，'班长'为值 1.3. 根据键访问值 info = {'name':'班长', 'id':100, 'sex':'f', 'address':'地球亚洲中国北京'} print(info['name']) print(info['address']) 结果: 班长 地球亚洲中国北京 若访问不存在的键，则会报错： >>> info['age'] Traceback (most recent call last): File \"\", line 1, in KeyError: 'age' 在我们不确定字典中是否存在某个键而又想获取其值时，可以使用get方法，还可以设置默认值： >>> age = info.get('age') >>> age #'age'键不存在，所以age为None >>> type(age) >>> age = info.get('age', 18) # 若info中不存在'age'这个键，就返回默认值18 >>> age 18 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 21:08:34 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/字典的常见操作1.html":{"url":"python_basics/字典的常见操作1.html","title":"字典的常见操作1","keywords":"","body":"1. 字典的常见操作11.1. 查看元素1.2. 修改元素1.3. 添加元素1.4. 删除元素1. 字典的常见操作1 1.1. 查看元素 除了使用key查找数据，还可以使用get来获取数据 demo: info = {'name':'吴彦祖','age':18} print(info['age']) # 获取年龄 # print(info['sex']) # 获取不存在的key，会发生异常 print(info.get('sex')) # 获取不存在的key，获取到空的内容，不会出现异常 1.2. 修改元素 字典的每个元素中的数据是可以修改的，只要通过key找到，即可修改 demo: info = {'name':'班长', 'id':100, 'sex':'f', 'address':'地球亚洲中国北京'} newId = input('请输入新的学号') info['id'] = int(newId) print('修改之后的id为%d:'%info['id']) 结果: 1.3. 添加元素 demo:访问不存在的元素 info = {'name':'班长', 'sex':'f', 'address':'地球亚洲中国北京'} print('id为:%d'%info['id']) 结果: 如果在使用 变量名['键'] = 数据 时，这个“键”在字典中，不存在，那么就会新增这个元素 demo:添加新的元素 info = {'name':'班长', 'sex':'f', 'address':'地球亚洲中国北京'} # print('id为:%d'%info['id'])#程序会终端运行，因为访问了不存在的键 newId = input('请输入新的学号') info['id'] = newId print('添加之后的id为:%d'%info['id']) 结果: 请输入新的学号188 添加之后的id为: 188 1.4. 删除元素 对字典进行删除操作，有一下几种： del clear() demo:del删除指定的元素 info = {'name':'班长', 'sex':'f', 'address':'地球亚洲中国北京'} print('删除前,%s'%info['name']) del info['name'] print('删除后,%s'%info['name']) 结果 demo:del删除整个字典 info = {'name':'monitor', 'sex':'f', 'address':'China'} print('删除前,%s'%info) del info print('删除后,%s'%info) 结果 demo:clear清空整个字典 info = {'name':'monitor', 'sex':'f', 'address':'China'} print('清空前,%s'%info) info.clear() print('清空后,%s'%info) 结果 Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 21:26:56 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/字典的常见操作2.html":{"url":"python_basics/字典的常见操作2.html","title":"字典的常见操作2","keywords":"","body":"1. 字典的常见操作21.1.1. len()1.1.2. keys1.1.3. values1.1.4. items1.1.5. has_key （Python3 已取消）1. 字典的常见操作2 1.1.1. len() 测量字典中，键值对的个数 1.1.2. keys 返回一个包含字典所有KEY的列表 1.1.3. values 返回一个包含字典所有value的列表 1.1.4. items 返回一个包含所有（键，值）元祖的列表 1.1.5. has_key （Python3 已取消） dict.has_key(key)如果key在字典中，返回True，否则返回False Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 21:28:00 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/字典的遍历.html":{"url":"python_basics/字典的遍历.html","title":"字典的遍历","keywords":"","body":"1. 遍历1.1. 字符串遍历1.2. 列表遍历1.3. 元组遍历1.4. 字典遍历1.5. 想一想，如何实现带下标索引的遍历1.6. enumerate()1. 遍历 通过for ... in ... 我们可以遍历字符串、列表、元组、字典等 注意python语法的缩进 1.1. 字符串遍历 >>> a_str = \"hello world\" >>> for char in a_str: ... print(char,end=' ') ... h e l l o w o r l d 1.2. 列表遍历 >>> a_list = [1, 2, 3, 4, 5] >>> for num in a_list: ... print(num,end=' ') ... 1 2 3 4 5 1.3. 元组遍历 >>> a_turple = (1, 2, 3, 4, 5) >>> for num in a_turple: ... print(num,end=\" \") 1 2 3 4 5 1.4. 字典遍历 遍历字典的key（键） 遍历字典的value（值） 遍历字典的项（元素） 遍历字典的key-value（键值对） 1.5. 想一想，如何实现带下标索引的遍历 >>> chars = ['a', 'b', 'c', 'd'] >>> i = 0 >>> for chr in chars: ... print(\"%d %s\"%(i, chr)) ... i += 1 ... 0 a 1 b 2 c 3 d 1.6. enumerate() enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。 >>> chars = ['a', 'b', 'c', 'd'] >>> for i, chr in enumerate(chars): ... print i, chr ... 0 a 1 b 2 c 3 d Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-03 11:30:22 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/集合.html":{"url":"python_basics/集合.html","title":"集合(扩展)","keywords":"","body":"1. 集合介绍1.1. 定义一个空集合1.2. 添加元素(add，update)1.2.1. add1.2.2. update1.3. 删除元素(remove，pop，discard)1.3.1. remove1.3.2. pop1.3.3. discard1.4. 交集和并集( & 和 | )1.4.1. 交集1.4.2. 并集1. 集合介绍 集合是无序的，集合中的元素是唯一的，集合一般用于元组或者列表中的元素去重。 1.1. 定义一个空集合 set1 = set() # 注意以下写法为一个空字典 set2 = {} 1.2. 添加元素(add，update) 1.2.1. add set1 = {1, 2, 4, 5} #添加元素 set1.add(8) 1.2.2. update set1 = {1, 2, 4, 5} #是把要传入的元素拆分，做为个体传入到集合中 set1.update(\"abcd\") 1.3. 删除元素(remove，pop，discard) 1.3.1. remove set1 = {1, 2, 4, 5} # 使用remove删除集合中的元素 如果有 直接删除 如果没有 程序报错 set1.remove(22) 1.3.2. pop set1 = {1, 2, 4, 5} # 使用pop删除是随机删除集合中的元素 如果set1没有元素讲程序报错 set1.pop() 1.3.3. discard set1 = {1, 2, 4, 5} # 使用discard删除 如果元素存在 直接删除 如果元素不存在 不做任何操作 set1.discard(2) 1.4. 交集和并集( & 和 | ) 1.4.1. 交集 set1 = {1, 2, 3, 4} set2 = {3, 4, 5, 6} new_set = set1 & set2 print(new_set) # {3, 4} 1.4.2. 并集 set1 = {1, 2, 3, 4} set2 = {3, 4, 5, 6} new_set = set1 | set2 print(new_set) # {1, 2, 3, 4, 5, 6} Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 21:29:14 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"python_basics/公共方法.html":{"url":"python_basics/公共方法.html","title":"公共方法","keywords":"","body":"1. 公共方法1.1. 运算符1.2. python内置函数1.3. 多维列表/元祖访问的示例1. 公共方法 1.1. 运算符 运算符 Python 表达式 结果 描述 支持的数据类型 + [1, 2] + [3, 4] [1, 2, 3, 4] 合并 字符串、列表、元组 * ['Hi!'] * 4 ['Hi!', 'Hi!', 'Hi!', 'Hi!'] 复制 字符串、列表、元组 in 3 in (1, 2, 3) True 元素是否存在 字符串、列表、元组、字典 not in 4 not in (1, 2, 3) True 元素是否不存在 字符串、列表、元组、字典 + >>> \"hello \" + \"itcast\" 'hello itcast' >>> [1, 2] + [3, 4] [1, 2, 3, 4] >>> ('a', 'b') + ('c', 'd') ('a', 'b', 'c', 'd') * >>> 'ab' * 4 'ababab' >>> [1, 2] * 4 [1, 2, 1, 2, 1, 2, 1, 2] >>> ('a', 'b') * 4 ('a', 'b', 'a', 'b', 'a', 'b', 'a', 'b') in >>> 'itc' in 'hello itcast' True >>> 3 in [1, 2] False >>> 4 in (1, 2, 3, 4) True >>> \"name\" in {\"name\":\"Delron\", \"age\":24} True 注意，in在对字典操作时，判断的是字典的键 1.2. python内置函数 Python包含了以下内置函数 序号 方法 描述 1 len(item) 计算容器中元素个数 2 max(item) 返回容器中元素最大值 3 min(item) 返回容器中元素最小值 4 del(item) 删除变量 len >>> len(\"hello itcast\") 12 >>> len([1, 2, 3, 4]) 4 >>> len((3,4)) 2 >>> len({\"a\":1, \"b\":2}) 2 注意：len在操作字典数据时，返回的是键值对个数。 max >>> max(\"hello itcast\") 't' >>> max([1,4,522,3,4]) 522 >>> max({\"a\":1, \"b\":2}) 'b' >>> max({\"a\":10, \"b\":2}) 'b' >>> max({\"c\":10, \"b\":2}) 'c' del del有两种用法，一种是del加空格，另一种是del() >>> a = 1 >>> a 1 >>> del a >>> a Traceback (most recent call last): File \"\", line 1, in NameError: name 'a' is not defined >>> a = ['a', 'b'] >>> del a[0] >>> a ['b'] >>> del(a) >>> a Traceback (most recent call last): File \"\", line 1, in NameError: name 'a' is not defined 1.3. 多维列表/元祖访问的示例 >>> tuple1 = [(2,3),(4,5)] >>> tuple1[0] (2, 3) >>> tuple1[0][0] 2 >>> tuple1[0][2] Traceback (most recent call last): File \"\", line 1, in IndexError: tuple index out of range >>> tuple1[0][1] 3 >>> tuple1[2][2] Traceback (most recent call last): File \"\", line 1, in IndexError: list index out of range >>> tuple2 = tuple1+[(3)] >>> tuple2 [(2, 3), (4, 5), 3] >>> tuple2[2] 3 >>> tuple2[2][0] Traceback (most recent call last): File \"\", line 1, in TypeError: 'int' object is not subscriptable Copyright © 賈誌翔 2021 all right reserved，powered by Gitbook文章修订时间： 2020-02-01 21:29:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}